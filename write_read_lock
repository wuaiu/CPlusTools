//#include <iostream>
//#include <boost/timer.hpp>
//
//#include <boost/thread/thread.hpp>
//#include <boost/date_time/posix_time/posix_time.hpp>
//#include <unistd.h>
//#include <shared_mutex>
//using namespace std;
////using namespace boost;
//
//#include <glog/logging.h>
//
//
////using namespace boost;
//
//int g_num = 10;      //全局变量，写者改变该全局变量，读者读该全局变量
//boost::shared_mutex s_mu;   //全局shared_mutex对象
//
//
//void read_(std::string &str)
//{
//    const char* c = str.c_str();
//    while (1)
//    {
//        {
//            boost::shared_lock<boost::shared_mutex> m(s_mu);    //读锁定，shared_lock
//            printf("线程%s进入临界区，global_num = %d\n", c, g_num);
//            boost::this_thread::sleep(boost::posix_time::seconds(1));    //sleep 1秒，给足够的时间看其他线程是否能进入临界区
//            printf("线程%s离开临界区...\n", c);
//        }
//        boost::this_thread::sleep(boost::posix_time::seconds(1));   //读线程离开后再slpp 1秒（改变这个值可以看到不一样的效果）
//    }
//}
//
//
//void writer_(std::string &str)
//{
//    const char* c = str.c_str();
//    while (1)
//    {
//        {
//            boost::unique_lock<boost::shared_mutex> m(s_mu);    //写锁定，unique_lock
//            ++g_num;
//            printf("线程%s进入临界区，global_num = %d\n", c, g_num);
//            boost::this_thread::sleep(boost::posix_time::seconds(2));    //sleep 1秒，让其他线程有时间进入临界区
//            printf("线程%s离开临界区...\n", c);
//        }
//        boost::this_thread::sleep(boost::posix_time::seconds(4));   //写线程离开后再slpp 2秒，这里比读线程多一秒是因为如果这里也是1秒，那两个写线程一起请求锁时会让读线程饥饿
//    }
//}
//
//int main()
//{
//    std::string r1 = "read_1";
//    std::string r2 = "read_2";
//    std::string w1 = "writer_1";
//    std::string w2 = "writer_2";
//
//    boost::thread_group tg;
//    tg.create_thread(bind(read_, boost::ref(r1)));   //两个读者
////    boost::this_thread::sleep(boost::posix_time::seconds(1));
//    tg.create_thread(bind(read_, boost::ref(r2)));
//
//    tg.create_thread(bind(writer_, boost::ref(w1)));  //两个写者
//    tg.create_thread(bind(writer_, boost::ref(w2)));
//
//    tg.join_all();
//
//    google::InitGoogleLogging("boost_test"); //初始化 glog
//    google::SetLogDestination(google::INFO,"./log");
//    LOG(INFO) << "Hello,GOOGLE!";
//    boost::timer t;
//    cout << "max timespan: " << t.elapsed_max() / 3600 << "h" << endl;
//    cout << "min timespan: " << t.elapsed_min() << "s" << endl;
//    boost::posix_time::ptime time_now,time_now1;
//    time_now = boost::posix_time::microsec_clock::universal_time();
//    sleep(1);
//    cout << "elapsed: " << t.elapsed()<< endl;
//    cout << time_now<<endl;
//    time_now1 = boost::posix_time::microsec_clock::universal_time();
//    boost::posix_time::millisec_posix_time_system_config::time_duration_type time_elapse;
//    int ticks = time_elapse.ticks();
//    cout << time_now1<<endl;
//    cout << "recall 花费 " << ticks/1000000<<"秒"<<endl;
//
//    getchar();
//    return 0;
//}

#include<stdio.h>
#include<unistd.h>
#include<pthread.h>

pthread_rwlock_t rwlock; //读写锁
int num = 1;

//读操作，其他线程允许读操作，却不允许写操作
void *fun1(void *arg)
{
    while(1)
    {
        pthread_rwlock_rdlock(&rwlock);
//        printf("read num first===%d\n",num);
        pthread_rwlock_unlock(&rwlock);
        sleep(1);
    }
}

//读操作，其他线程允许读操作，却不允许写操作
void *fun2(void *arg)
{
    while(1)
    {
        pthread_rwlock_rdlock(&rwlock);
        printf("read num second===%d\n",num);
        pthread_rwlock_unlock(&rwlock);
        sleep(2);
    }
}

//写操作，其它线程都不允许读或写操作
void *fun3(void *arg)
{
    while(1)
    {

        pthread_rwlock_wrlock(&rwlock);
        num++;
        printf("write thread first\n");
        pthread_rwlock_unlock(&rwlock);
        sleep(2);
    }
}

//写操作，其它线程都不允许读或写操作
void *fun4(void *arg)
{
    while(1)
    {

        pthread_rwlock_wrlock(&rwlock);
        num++;
        printf("write thread second\n");
        pthread_rwlock_unlock(&rwlock);
        sleep(1);
    }
}

int main() {
    pthread_t ptd1, ptd2, ptd3, ptd4;

    pthread_rwlock_init(&rwlock, NULL);//初始化一个读写锁

    //创建线程
    pthread_create(&ptd1, NULL, fun1, NULL);
    pthread_create(&ptd2, NULL, fun2, NULL);
    pthread_create(&ptd3, NULL, fun3, NULL);
    pthread_create(&ptd4, NULL, fun4, NULL);

    //等待线程结束，回收其资源
    pthread_join(ptd1, NULL);
    pthread_join(ptd2, NULL);
    pthread_join(ptd3, NULL);
    pthread_join(ptd4, NULL);

    pthread_rwlock_destroy(&rwlock);//销毁读写锁

    return 0;

}
